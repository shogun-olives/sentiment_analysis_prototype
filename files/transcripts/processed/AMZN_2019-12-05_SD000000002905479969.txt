nice shifty look welcome everyone first day event hope really good invent always learning educational experience hope guy learned lot past day thought something different year really focus bit behind scene aws amazon sort new feature service one thing fortunate aws let say 13 year gotten lot experience experience allowed u innovate range behind coverage maybe seen new service feature launched past day sort forget lot thing behind scene quote jeff bezos say sometimes innovation want focus innovation focus thing never change customer create ï¬‚ywheels benefit forever easy see work retail yes larger catalog mean higher likelihood find looking lower pricing better guarantee delivery work aws thing never change customer security performance scale reliability cost eï¬ƒciency operational excellence thing never change anything parameter benefit forever sale thing thing put press release really thing sort innovation behind cover example always make sure improve performance component system thought today look thing done aws behind scene little bit deep dive see kind le learned maybe like investment well maybe could take home something first thing would like talk virtualization virtualization sort bread butter computer part cloud environment day 1 one major technical underpinnings really allowed cloud computing become big look classical virtualization actually around quite long time major mainframe worked already virtualization way see virtualization today basically x86 virtualization really came life major research stanford cambridge one stanford resulted vmware made use binary rewriting trap privileged instruction hypervisor xen took different approach xen actually modified operating system make sure trapped hypervisor execute privileged instruction look sort basis virtualization yes really pushed boundary virtualization time something today virtualization called root i/o virtualization text basically guest os fighting i/o resource especially see network look sort virtualization really scaled would see customer guest os would see significant data variation latency network mostly fighting network device started think radically change think sort rethinking virtualization actually create base innovation customer also fact newer kind architecture really hampered old style virtualization basically really wanted give customer performance almost bare metal would possible saw additional virtualization significant overhead really wanted build modular system least thing amazon really thinking sort taking lesson learned software actually apply hardware world virtualization world well basically see traditional virtualization world monolith yes hardware component actually managed hypervisor well actually take lesson micro service small building block really quickly innovate supply hardware world well maybe chase world virtualization well think sort create world device api api may hardware api like pci bus still hardware still api reach hardware let take look sort different step taken sort evolution nitro system let start really traditional virtualization really thinking first problem tried solve network basically transferring let say 8 gigabit file sv would result literally hundred thousand kernel trap really wanted see whether could actually solve particular problem actually moved network component onto separate card really first version actually saw c3 instance launched 2013 really learnt lot actually oï¬ „ oading i/o onto separate card took u actually another two year really become much familiar would take actually oï¬ „ oad processing onto separate card sit server step 2 actually c4 architecture started working annapurna lab actually move eb processing separate card longer sort volume processing network happening main cpu success nitro card c4 annapurna lab actually joined aws started working c5 major jump could also i/o server would say oï¬ „ oad i/o onto separate card next step really start thinking actually remove piece hypervisor move control plane separate card became complete nitro system nitro controller management also built new hypervisor absolutely really minimized first one x1s actually really became first much faster much better performance much secure could ever done let take look sort work interact basically would create volume eb volume would volume attach would actually talk eb control plane talk eb card nitro nitro system actually make nvme device notifies pci bus hypervisor trap actually mount volume guest arrest quite successful look sort pre nitro hypervisor sort typical jitter would seeing interact eb device oï¬ „ oaded onto nitro basically jitter disappeared allowed u double iop eb increase throughput tremendously hear earlier invent year eb optimized bandwidth actually increased 40 gigabit per second 19 gigabit per second networking eb really important actually customer look processing happened processor david brown earlier week talked customer requirement 150 microsecond processing time look c4 nitro hypervisor introduced see customer trouble actually meeting processing capability asked customer actually try thing c5 see c5 performance almost close bare metal purely hypervisor thin longer way guest o get performance want go storage latency yes ic already beast term storage see introduction nitro p50 well end performance spectrum rock solid performance increased almost much 4x look network optimized instance created one n back instance name went peter desantis talk monday night saw additional board created give network performance increased 4x looking improving performance actually oï¬ „ oading lot onto separate card also could improve security trust one kill dom0 yes remember dom0 old style virtualization complete linux instance basically could log memory dump big security risk yes actually removing dom0 also remove ssh access device create much secure environment oh thank would give detail actually like important part whole nitro security design basically control communication ï¬‚ow happen nitro controller talk hypervisor allowed communication hypervisor allowed communicate back hypervisor take action control actually access nitro controller know system compromised isolate start investigating go external control plane whether ec2 eb allowed communicate nitro controller like saw earlier eb example nitro controller however allowed take action nitro controller actually start actively going network know system compromised isolate unique communication design allows u build extremely secure system yes really need able eye trusted computing untrusted world created 2 trusted part nitro system nitro system also sits complete trusted network component actually talk another thing able actually add encryption know always big fan actually encrypt everything nitro able encrypt everything encrypt communication nitro card default everything encrypted default nitro yes thing go network also local disk encrypted default performance implication see way actually improved security significantly ca even trust host guest yes make sure guest longer moment actually anything hardware machine allow one thing example absolutely allow modify nonvolatile memory machine also machine boot actually cryptographically check component machine ensure never compromised sense otherwise isolate machine actually start investigate cool thing nitro became base innovation could thing could never example could live update could start patching operating system could start patching hypervisor nitro card without anything taking could add new hypervisors could also start running bare metal could also create outpost thing enabled fact created platform called nitro control computer environment also another innovation asked actually protect sensitive data number customer course ec2 used lot processing customer asked u something u yes innovation given nitro could unique thing earlier week announced nitro enclave allows cordon little piece memory memory golden enclave enclave run code code continuously checked cryptographically correct making sure code never compromised enclave also access network disk parent instance actually communicate free sox secure channel allows quite customer even higher control sensitive data look sort innovation figure started yes able increase release 4x number instance clare liguoriafter induced nitro really game changer really changed way think compute environment control compute environment also allowed u go stack think sort find support vms find support container server introduced micro vm called firecracker tell u firecracker fargate clare liguori principal software engineer aws container team clare hi clare liguori excited today take hood fargate fargate serverless compute container fargate run ten million container customer every week security 1 priority serverless container workload virtualization provides strong isolation boundary workload fargate use virtualization isolate customer even isolate copy application application fargate made one container copy application run virtual machine hood fargate isolating container running fargate inside virtual machine dedicated kernel network interface data volume credential ensure application isolation multiple level like show example typical application look like running hood running isolated virtual machine invent trivia online trivia game invent running fargate tuesday announced use fargate elastic kubernetes service eks running application using eks fargate going show happens hood fargate large traï¬ƒc spike come website say example showed invent keynote thousand people let first look happens run application eks without fargate running ec2 instance handle change traï¬ƒc configured kubernetes auto scale number container called pod kubernetes number ec2 instance normal traï¬ƒc like seeing running pod ec2 instance shown game keynote course traï¬ƒc going ï¬‚ood people trying game take little kubernetes spin enough ec2 instance run pod needed handle traï¬ƒc waiting instance start causing big latency spike traï¬ƒc going start drop kubernetes going spin pod eventually terminate ec2 instance instant tends lag behind pod time actually let look happens situation running hood fargate fargate want worry enough ec2 instance run pod serverless compute fargate take care isolating pod virtual machine allocating right amount compute per pod traï¬ƒc spike come new pod spinning fargate quickly allocating new virtual machine per pod hood small latency spike pod start starting quickly resolved running using fargate number pod react really quickly change traï¬ƒc site kubernetes spin pod traï¬ƒc dropping worry using fargate serverless compute really see difference running ec2 instance running fargate ec2 saw provisioning fargate able quickly react change traï¬ƒc fargate isolated pod virtual machine allocated right amount compute per pod seen fargate scale isolates container serverless compute let look virtualization technology use provide strong isolation boundary application since fargate launch used ec2 instance isolate application virtual machine model application allocated fresh ec2 instance running fargate data plane traditional virtual machine pretty heavy weight use isolating container traditional virtual machine tend present lot interface device container simply care small example traditional vm typically present video card reserve least 4 megabyte memory graphic container almost never graphical environment really small small 256 megabyte fargate wasted resource using traditional vms isolate container fargate provides better eï¬ƒciency isolating container fargate isolating container function virtual machine called microvms microvms provide level isolation traditional vm fast lightweight device need device model implement device actually needed container function video card inside microvm reserving 4 megabyte memory like traditional vm fact microvm requires le 5 megabyte overhead total highly eï¬ƒcient use isolating container really excited see project like weaveworks/ignite kata container leveraging firecracker provide fast eï¬ƒcient isolation project isolation fargate application allocated fresh firecracker microvm instead fresh ec2 instance microvms look pretty similar ec2 instance showed already look inside difference application container running inside werner vogelshave component like fargate data plane firecracker able achieve better eï¬ƒciency compared traditional vms pack many microvms onto single nitro bare metal instance microvm running isolated fargate application run fargate firecracker high density mean better eï¬ƒciency fargate want share bit working hood fargate optimizing fit firecracker fargate originally ran fargate data plane inside microvm like ec2 instance longer optimal high scale high density nitro bare metal redesigned fargate data plane ground unique need serverless container compute new data plane development designed run directly nitro bare metal instance manages microvms container workload inside container running inside microvms actually start faster model wait component start microvm like fargate data plane developing core component new fargate data plane open github firecracker containerd project firecracker containerd make simpler use firecracker isolate container enables using open source project containerd manage firecracker microvms minimizes overhead required isolating container microvms expose container image block device microvm check github little sneak peek future part fargate hood thank much thanks clare course fortunate microvms also allow u run lambda think looked watch seen lambda improve past year done past week month releasing really cool stuff think given many rely vpc boundary able actually really reduce latency vpc boundary vpc boundary look sort new concurrency scaling released component proficient concurrency get really good control time quite piece thing lambda well fargate also want serverless technology first adopted let say young technology company turn case rapid adoption serverless happening enterprise mostly really pay execution time management much simpler enterprise adopting serverless tremendous speed jeffrey dowdsand like introduce jeffrey dowds executive vanguard share making use technology completely revamp vanguard jeffrey good morning thrilled represent vanguard today excited share vanguard journey cloud vanguard core purpose take stand investor treat fairly give best chance investment success let introduce firm global asset manager 30 million investor entrust u 5.7 trillion asset offer 450 investment product 17,000 crew refer employee physical branch digital firm 90 client interaction come digital channel 40 year lowering cost invest importantly industry best client satisfaction result perspective big complicated global data center mainframe thousand server lot storage thousand apps 50,000 endpoint 5,000 technical staff business downtime tolerable 60 year ago vanguard senior leader set transformation knew vanguard going stay competitive digital age needed better business wanted accelerate pace innovation wanted deliver business value speed continuous delivery devops microservices cloud new way working ci/cd concept play knew cloud cornerstone going fast knew linchpin success set private cloud journey since concern public cloud security one year journey back 2015 sent 3 cloud architect invent upon return knew could compete service delivered aws also knew building private cloud going take long expensive quick huddle ciso senior leader pivoted public cloud selected aws cloud provider public cloud destination quickly formed cloud construction team many audience today thanks guy full stack structure mission importantly aligned goal big firm like vanguard big data center get cloud starting point traditional tech stack heavily virtualized big data platform monolithic application talking monolith 1 million line code monolith 30 million 40 million 50 million line code apaas running emerging portfolio microservices following design guideline security first commensurate heavily regulated asset manager built account dpcs security apparatus entailed 150 security control security place wanted start moving workload cloud started web apps microservices moved apaas thought fastest way start getting workload cloud time established secure internet connectivity using route 53 dns aws web application firewall cloudfront cdn also migrated vpn access direct connect improved resiliency bandwidth facility wanted shut rapidly growing big data platform became heavy user s3 emr machine learning capability comprehend lex sagemaker transcribe glue introduced aws security service implemented use secret manager authentication credential use macie discovering protecting sensitive information use shield ddos protection knew get data closer microservices still reaching back data center data using cdc technology along aurora allowed u move data similar schema relational database microservices solution delivery team wanted access data key value structure introduced dynamo using kinesis data streaming lambda data transformation began moving dynamodb put u position eliminate data cache next huge design decision focused apaas pivoted ec fargate mentioned earlier werner remark got stronger container isolation got security box got integration key service especially identity access management importantly guy paying aws bill got pure consumption model hooked ec fargate dynamo aurora starting drain microservices apaas accelerating pace monolithic composition allow u retire apaas near future finally started move gold copy bounded context function data cloud recently strategically decided host emerging advisory platform ec fargate platform support advice service increasingly demand client werner vogelsso end state 100 cloud native architecture vanguard get know reduce cost compute least 30 know build software 30 faster know deploy capability 20x faster lead better ability innovate along way get improved resiliency since 1973 vanguard disrupting investor pursue financial security today mark 17th time vanguard stage somewhere invent like thank aws opportunity like thank vanguard cloud construction team making possible like thank investor entrust u asset enjoy financial security thank thanks jeffrey really cool hear customer faithful vanguard especially seeing benefit getting platform one thing think back talked nitro think sort general concept fact aws amazon well aws especially always think evolvable architecture mean often start building architecture keeping mind might software running year two year especially scale like within aws make sure example order magnitude almost revisit architecture built think probably better example s3 sort first real service delivered everyone remember designing s3 number object board thought would storing first six month heck added 2 order magnitude blew first month yes meant certainly meant keep good eye architecture last year stage talk sort s3 evolved time started 8 microservices last year stage holding 53 microservices s3 262 yes example new capability heard example s3 access point first launched andy keynote new microservice s3 replication time control 8 microservices access analyzer s3 another 4 5 microservices show able evolve system taken really good care thinking would evolvable architecture one thing always proud s3 one core principle s3 reliability mostly always like say everything fails time yes mostly think hardware think disk really high failure rate network controller weird thing bit ï¬‚ips memory thing happen scale need able prepared even hardware even thinking sort like black swan event like bug catching one component always thinking reduce impact thing fail reduce impact customer call blast radius always thinking reduce blast radius talked last year last year also peter vosshall gave great talk architecture let quickly revisit yes would regional architecture something spends multiple az based version would sort big smaller component blast radius potential failure limited cell also zonal architecture something life 1 zone time different zone also actually make use architecture approach always case want reduce blast radius exactly pick size cell smaller cell really reduce blast radius easy test easy operate larger cell reduce split also see whole system easier operate question always really nicely partition system actually make use architecture think service aws probably eb really good example let take look kind thing done eb really reduce blast radius route yes think eb block store service think something disk attached right really case multiple shard actually make volume course replicate yes address another set shard actually replication control type failure shard configuration master yes configuration master sits actually second network second network sort overï¬‚ow network big provisioned front end network ec2 eb configuration master sits configuration master nothing actually thing shard would fail node would fail sort restarts trigger actually pretty simple one yes something fails fails backup start new set shard configuration master terribly much multiple thing fail time thing get easily overloaded especially talking 1 disk talking 1 volume talking million million million volume 1 configuration master configuration master actually becomes single point failure easily get overwhelmed thinking sort improve always always tension consistency availability cap theorem say world partition yes end consistency availability consistency eb nonnegotiable need make sure environment actually ensure high availability consistency make sure consistency never get traded based architecture come back yes apply eb eb master would maybe start reforming zone split zone 2 maybe split 4 every time reduce blast radius impact failure overload configuration master thinking thinking actually smallest unit cell actually achieve eb especially configuration master dawned u actually eb unique case configuration master well data need available client remember essence old style database world meant 1 database need accessible client case client ec2 instance eb volume actually need access particular configuration data instead sort splitting 4 went million tiny database ensure blast radius eb small possible physalia actually come lesson world portuguese look like jelly fish essence consists hundred thousand really small microorganism colony together present 1 thing name come look sort data model volume get created get partition key database physalia manages 1 partition key create colony micro cell cell support 1 partition key really mean end million million cell okay small simple manage cell life environment node actually inside cell 7 node run paxos actually able distinguished proposal master 7 cell paxos state machine reliable one thing able physalia well make sure cell always close client possible database really tied often happens client move throughout az get volume get attached different server thing like physalia able make sure configuration master life close cell possible client possible reducing blast radius look sort impact physalia physalia sort error rate aggregate error rate accessing configuration master world always see happens actually pretty spectacular architecture play important role particular case able go cell cell small 1 single key significantly reducing blast radius potential impact failure think sort architecture one thing technique learned time amazon think cool especially application either stateless soft state kind thing right client actually involved story well think sort regional architecture used card deck card representing different customer dice given vega diamond one actually start fails introducing enormous workload push something hard bug triggered regional architecture might take first node course immediately retry take everything whole region architecture yes basically map map customer onto particular cell scenario happens yes happens 2 node cell get taken okay good particular case 25 customer affected would take club yes club go something completely different called shuï¬ „ e sharding basically number node actually take client twice actually take random hash randomly spread different shard diamond actually introducing failure see actually another customer share cell affected mean basically look math behind basically combinatorial particular case 8 node shard size 2 yes failure rate impact particular failure 3.6 customer small set imagine improve 100 shard size 5 see 1 client almost impact client end grows combination grow really make use math actually really build highly reliable system really minimize blast radius failure system mean smart client actually know retries thing like rest think math really build real building distributed system hard yes always done done amazon past 20 25 year scale unparalleled many always asking u guy mean 25 year must lot experience building sebastien de halleuxthese kind system amazon sort build resilience amazon engineer scale kind lesson learned managing operation thinking gotten best engineer architect together given talk past year happy announce today amazon builder library actually bring information build highly reliable system like amazon launching 15 article sort different area example implement health check best practice around history amazon kind thing learned hope help build distributed system scale reliability amazon aws think charting unchartered territory yes next customer one really charting new territory saildrone exciting creates wind solar powered autonomous surface vehicle making use sort technology charge everything sea like invite ceo saildrone sebastien de halleux actually come talk sebastien ocean unbelievably vast covering 70 planet act powerful engine driving complex planetary system affect humanity yet ocean data scarce standard ocean incredibly vast also unforgiving dangerous environment land grown accustomed billion connected sensor sea hundred principally mooring imagine large steel buoy tethered ocean ï¬‚oor long cable weighted set train wheel dangerous deploy expensive maintain course satellite providing big picture past 25 year measure variable low resolution see water know better using robot study distant world solar system time start quantifying planet fix measure prepare know set saildrone breakthrough started 10 year ago pursuing speed record march 26 2009 founder richard jenkins broke record mojave desert 126.2 mile per hour powered car called greenbird mark v. record still standing thank birth saildrone core record innovative wing tail arrangement similar provides lift airplane tilted 90 degree solution capable producing immense forward propulsion long period time consumes le 3 watt electrical power le refrigerator light bulb saildrone carry suite sensor measure atmospheric oceanographic variable incredible precision thing like wind speed direction air temperature pressure barometric pressure humidity solar radiation also water water temperature salinity dissolved oxygen dissolved carbon dioxide atmospheric carbon dioxide underwater sound current profile biomass bathymetry 1,000 meter talking powerhouse data collection course 1 saildrone global ï¬‚eet saildrone incredible planetary infrastructure naturally powered aws saildrone endurance resiliency robot working around clock achieving mission duration 12 month werner talk resiliency exact reason chose aws cloud provider partner massively scale also provide resiliency aws delivered enabling u provide data clock global customer base without skipping beat example resiliency critical better fish stock data important manage fishery information affect million job globally millennium growing catch 1996 peak fishery catch ï¬‚at indicating severe overfishing ocean manage resource measure mission estimate biomass various fish stock pollock sardine mackerel saildrone using sonar device emits sound sound wave listens echo back fish seabed painting ocean sound develop large statistical model biomass significant area ï¬‚eets saildrones fish migrate faster count better estimate ï¬‚eet saildrone work bering chukchi sea u.s. arctic home 1/3 commercial catch closer home work every year along west coast united state vancouver island canada way mexican border truly groundbreaking work autonomous vehicle surface onboard camera busy accruing large data set tag image come think image net ocean data set power first machine learning algorithm optimized maritime domain awareness place everything always moving every frame complex problem course still ocean keep surprising u algorithm encounter novel scene like seal hard tag earlier year saildrone successfully completed first ever unmanned autonomous circumnavigation antarctica seen deep race hard go around track went around antarctica 196 day nonstop new zealand new zealand data mission quantified key role thank southern ocean play regulating planet carbon dioxide key driver climate change achieve speed relied serious data crunching aws navigate waypoint waypoint first ingest numerical model describing change pressure system turn drive various wind pattern different direction something inï¬‚uences trajectory drone pretty dramatic way surface track current adding around swirling slower progress course wave large wave different wave height different period act many obstacle slow progress literally destroy vehicle see zoom onto drone see navigation logic actually quite complex navigating multiple field optimal manner task accomplished seamlessly cluster aws compute sending resulting instruction vehicle via satellite vision one called quantified planet 1 saildrone dividing entire global ocean 1,000 sub domain 6x6 degree size working deploy drone box goal achieve planetary coverage thereby help deliver better insight planetary system affect humanity system like weather modeled numerically aws using new instance type like p3 c5n instead old supercomputer combining aws compute saildrone unprecedented institute data deliver new insight global precipitation example global wind monitoring hurricane storm typhoon course monitoring heat ï¬‚uxes tropical pacific famous el niãƒâ±o delivery near real time compute package deliver insight hand user globally saildrone forecast app next next frontier mapping global seabed hard may believe 85 global seabed remains unmapped unexplored hard work solve data collection problem big problem need big solution built ultimate machine task proud present saildrone surveyor long vehicle carrying 1 ton sonar system capable imaging bottom sea 8,000 meter 24,000 foot together partner aim complete mission within next 10 year creating first complete map earth benefit humanity werner vogelstrue planetary endeavor involves unprecedented scope data set like much work really made possible collaboration aws help store process amazing set critical data excited see future hold explore new realm new possibility saildrone look forward continuing strengthening amazing partnership aws thank thank big part course weather prediction ï¬‚uid dynamic want see treat aws supercomputer rewatch peter desantis presentation monday night really explains make use ec2 instance build supercomputer going take little bit different track looking bit big industry kind stuff seen seen happening especially world manufacturing industry 1.0 course end 1800s steam machine came action saw whole industrial revolution started take place gin cart starting invented look sort industry 1.0 moving 2.0 electricity get introduced becomes big source power see start see major shift manufacturing process well first first assembly line built state whereas 3.0 electronics start arrive factory ï¬‚oors start sort controlled pcls thing like next phase know day called industry 4.0 automation start taking place everything becomes automated especially also thing like logistics everything else around really industry 4.0 really believe much look 2015 average age equipment factory 22 year never old since 1935 factory equipment really old able produce data want get create insight think 4.0 yet factory manufacturing site need change significantly really want start creating insight world yes look different piece still really big deal manufacturing site data helping create insight data need start ï¬‚owing manufacturing site place actually analytics want create insight lot insight mean look example predictive maintenance autonomous transportation wearable collaborative robot kind thing eye industry 4.0 hardly manufacturing already pace today factory already producing 1,800 petabyte data year small fraction needed really create insight world whether manufacturer whether smart city actually start moving data cloud actually multilayers approach whether want thing actually want go actually start thinking transportation company match make smarter decision computation example move level city go even yes go think sort kind thing around agriculture world actually grows expectation 2050 35 people world need fed way transportation right multiple layer sort collecting data could data need grow together create new insight think think sort bring back amazon operates think back sort physical part amazon.com fulfillment center early day sold book 3 million book available amazon started course fulfillment challenging logistical challenge actually relatively simple however need start selling tv toothpaste pillow shoe coffee thing become lot complex yes plan really early day looked like worked like normal warehouse would look like definitely longer case aimed really sort create better delivery moved 1 moment 25 free shipping shipping shipping use prime get within hour thing change still need improve worker safety make sure guarantee speed would like course typical warehouse 4 million bin 10 million item use computer vision throughout system set called manhattan grid style part bitsy pod kiva system actually follow bring towards worker put thing box together make sure actually 2 item ordered go box together use machine learning actually predict thing yes definitely 4 different area yes forecasting product buying buy large manufacturer mom pop shop question place place kind promise give customer term delivery actually pretty challenging yes actually popular product something seasonal like warm sock sun hat summer easy coffee thing like easy thing predict actually sold across world need nicolas cage reversible sequin pillow cover well one harder predict would actually place one make use machine learning look thousand thousand similar item start making prediction buy vega want pillow probably get coming two day machine learning play increasingly important role look many thing done amazon past 20 25 year machine learning probably basis small stuff like fender lead detection fault detection kind thing happening behind cover also major innovation like alexa yes drone scout driven machine learning probably extreme one know amazon go store could walk take thing shelf put bag walk get charged enough challenge yes first figure account account moving store see unmarked cdv presentation see turning yellow mean actually know certain count counting actually moving challenge computer vision actually product product crumbled yes product actually really almost identical different product also people actually interacting store invested lot generating synthetic information actually start making algorithm eï¬ƒcient accurate result scan walk store walk get charged look sort outside aws outside amazon many cool thing happening physical world actually powered aws let take look yes first sort workplace safety one favorite example customer went path improve quality operation safety woodside liquid natural gas producer australia actually significant operation one part producing liquid nitrogen natural lpg whatever actually freeze 160 degree 0 happens massive refrigerator one thing old world would sensor thing sensor would alarm something went wrong ability produce data woodside moved system actually producing data actually process part failure part called foaming would sort alarm go whole factory would shut maybe even week pretty hazardous environment happens sensor 10,000 sensor refrigerator actually actually start predict foaming longer create hazardous condition customer first experiment ï¬‚ipped switch brought 200,000 sensor online actually started create autonomous environment worker environment extremely hazardous one hand autonomous platform sea worker robot particular case see robot actually moving throughout plant extremely hazardous plant without danger worker worker sit centralized environment actually see robot also seeing box see popping iot sensor run aws iot core able actually take action sort controlled thing need happen instead send people big hazardous suit work modjoul another interesting company make wearable device improve workplace safety like safety belt glove thing like track worker move hazardous environment one interesting story told one major u.s. airline actually use safety belt measure far people actually bending far worker bending like whether actually use right technique pick thing ground really improve worker health united rental moving create massive machinery completely autonomous nobody longer need work massive machinery hazardous environment another area really interesting digital sort physical world combination way city made smarter lot work going particular world thing interesting example shotspotter measure gun activity city apparently every homicide 100 gunfight 100 gunshot accident never reported make use multiple sensor really able accurately within 60 second able actually identify location gunshot send law enforcement actually take care city miami taken 2014 since homicide dropped 35 miami city virginia beach put sensor ocean start measuring predicting ï¬‚oods going happen martin hofmannmiovision actually put sensor around street optimize transportation lot interesting sort physical digital world agriculture lot work going developing finding new way feed future 2 interesting customer space one climate corporation actually make use digital whole digital architecture called climate fieldview make use sensoring tractor equipment well satellite imagery help farmer optimize yield farmer business network interesting one farmer sharing anonymously information yield field kind crop growing actually collective bargaining seed provider well setting price crop selling go world transportation whether siemens putting sensor around world train track biggest cause delay often bending rail thing like measure deutsche bahn big german transportation provider putting also sensor train accurately measure delay thing like vantage power interesting customer sensor electric bus preventive maintenance battery bus think sort coming back talked earlier really modernization manufacturing creating data stream manufacturing actually really optimize insight talk really interesting next speaker ceo innovation award ceo magazine year talk modernization manufacturing group cio volkswagen dr. martin hofmann hi martin hofmann volkswagen volkswagen started beetle today group 12 iconic automotive brand brand portfolio vw audi porsche bentley bugatti lamborghini seat skoda ducati motorcycle man scania truck 365 model portfolio want drive different model every day going take year pure fun joy promise produce 11 million vehicle per year 44,000 day mention number massive scale requirement supply chain global basis run eï¬ƒcient effective way supply chain highly complex global 1,500 supplier globally produce manufacture every day 200 million component part component part shipped global factory 18,000 truck per day shipping component factory 7,700 ship ocean crossing ocean produced vehicle year 75 million cubic meter material process 122 factory worldwide 5 north america 9 brazil argentina 71 europe 4 south africa 33 china india factory running different grown technology different age hard scale standpoint together aws lifting 122 factory cloud one common global architecture building aws entire project call volkswagen industrial cloud right probably biggest iot project manufacturing world chose aws technology ability scale provide u standard factory implementation speed getting aws methodology ï¬‚exibility culture helping u really accelerate project way build center built aws cloud call digital production platform aws cloud platform connect machine robot press shop print shop body shop assembly machine logistics system get connected cloud run heavy lifting ai machine learning algorithm iot service security control constantly optimize compute situation factory top aws cloud put call volkswagen group app store develop use application factory develop copy paste factory download cloud application like predictive maintenance algorithm manage optimize factory function digital production platform take extend outside world mean integrating connecting supplier cloud integrating logistics company equipment manufacturer business partner connected industrial cloud even open open automotive manufacturer use application technology industrial cloud also invited contribute load software cloud like open source ecosystem going one biggest ecosystem built industry architecture behind ca go detail know better 4 major building block using architecture one ot operation technology gateway connecting machine robot werner vogelscloud edge gateway lot function workload run close machine using outpost 2 outpost per factory several application run using outpost plant cloud fourth element dpp enterprise cloud application framework highly standardized able quickly higher speed develop application production system keep cloud let show something presentation happens shop ï¬‚oor aws cloud get married machine robot welding system imagine running factory thousand sensor constantly sending data aws cloud digital production platform algorithm machine learning algorithm constantly optimize setting factory parameter machine also run application employee based cloud better manage factory system werner mentioned earlier talk transformationally manufacturing go way beyond automation full integration data point factory volkswagen industrial cloud foundation new production strategy future autonomous factory dark room factory start direction also reduce factory cost define standard plant increase production program fulfillment mean delivering vehicle time customer product launch much faster come market earlier new vehicle number 30 increase productivity decrease factory cost 30 targeting eur 1 billion saving supply chain incredible journey aws partner thank much fortunate past year travel world meet many customer always interesting see certain group customer younger business trying solve really hard human problem whether around education whether around health working hard tackling hardest human problem moment example aquabyte company bergen bergen norway working create protein protein likely become major food source future grow salmon bin like easily 200,000 salmon interesting see allowed u come actually video started tv series called go build 8 episode deal world hardest problem young business really tackling hard problem collaboration aws around food one favorite first episode company called hara token jakarta problem indonesia many farmer small farm holder identity get loan buy seed farm go loan shark indonesia often charge 60 giving farmer identity identity also measure size plot land yield plot land able get farmer identity data take bank bank eager actually give farmer loan repaying rate almost 100 company really tackling really hard human problem one episode bit fun episode released today episode amsterdam presentation episode released last week rio de janeiro health care find new way providing health care poorest people brazil even though brazil national health service capable actually keeping need brazilian especially poor brazilian urge go check inspirational story young business running aws solving world hardest problem well hope see guy tonight fun party go build