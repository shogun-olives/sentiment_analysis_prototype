good morning welcome bi analyst briefing idc container possible growth area infrastructure software name mandeep sing software analyst bloomberg intelligence today al gillen group vp idc gary chen research manager idc couple housekeeping note today presentation recorded available playback feel free ask question submitting one right slide address question conclusion presentation bi bloomberg intelligence provides analysis datasets industry company government esg credit economic litigation factor impact business decision bloomberg intelligence research backed 300 plus data provider delivered buy sell recommendation analyst team average 20 plus year side experience bi exclusively provided client subscribe bloomberg professional service accessed bi go hand al gary kick presentation al thanks mandeep get u right slide want sorry looking slide exist okay today want talk container joined gary chen al gillen speaking right give little bit background gary involved research long time idc gary lead virtualization software defined compute container much roll space worked collaboratively gary area number year recently took developer research looking container technology developer angle going going kick presentation basically four area want talk want start explaining idc see really driver changing industry refer digital transformation dx talk little bit impact customer mandeep singh al gillenwe talk cloud native application specifically important change norm application development past dive container specifically give little bit background essentially change bring new construction technique new management lifecycle paradigm mix customer going deploying part digital transformation talk orchestration container alone half story really need orchestration engine conjunction container get full benefit talk course expecting healthy robust q discussion point moving forward next slide focusing digital transformation apologize getting mandeep getting collection error message screen presumably right slide front go ahead okay thank yeah anyway slide titled digital transformation dx think idc perspective see industry moving like categorize three broad period time first platform mainframe connectivity typically access device fixed function terminal second platform distributed computing really coming second platform today distributed computing second platform era used unix server linux server window server x86 based system typically use local area network wide area network connection medium primarily pc point access course transition third platform moving scenario much backend infrastructure move time cloud device whole collection thing simply pc may one device use course use phone got thing going accessing data well intelligent thing intelligent thing happens start move forward third platform era digital transformation really take advantage number thing happen move conversion one start look scenario infrastructure becomes standardized rationale reasoning standardized infrastructure simply get benefit eﬃciency common set baseline infrastructure server service consuming reality start think movement infrastructure get standardized infrastructure environment call microsoft amazon say hey want special server cloud mean get make base infrastructure since customer get basic infrastructure today many customer consuming infrastructure service iaa typically may opportunity specialization base infrastructure layer frankly think necessarily best interest long term simply move iaa platform service model get platform service model customer say infrastructure look like benefit standardized infrastructure datacenter today wind something look act lot like cloud environment using time second piece got modernize application application longer monolithic nature second platform era today customer starting build application much modular fashion really tie back container use container use cloud native type development technique drill little bit depth couple minute start get model got modern application largely componentized essentially small broking smaller piece individually go life cycle happens got move different model actually deploying managing application notion using devops methodology devops process manage life cycle application thing really important mentioned mean benefit type devops process together modern cloud native type application portfolio allows iterate rapidly allows deploy frankly move two also allows great deal ﬂexibility agility one thing customer looking today okay moving think hit lot point already summary list digital transformation digital transformation benefit activity customer going standardization infrastructure one piece see customer starting make sure system interconnected automation thing managed autonomically automatically thing tend go life cycle much automated fashion thing got data big part digital transformation includes consuming data wide variety source certainly social medium social data pulled utilized application got thing like weather data census data necessarily changing quickly consist fairly large datasets course skipped first one internet thing going tremendous amount data coming internet thing go forward important able consume set data leverage application part happens customer go digital transformation data get organized stored got make decision based data ca act data manner competitor going find significant disadvantage competitive situation bottom line final thing think software intellectual property application functionality really becomes differentiator becomes something delivered lot value believe lot value software going monetized subscription license sale historically rather lot software intellectual property becomes part set resource device thing accessible thing able make smart decision function using software software get monetized thing become valuable important tied together okay one slide going get gary start jumping next couple slide cloud native application talked little bit think important recognize cloud native application one cornerstone going make digital transformation possible one thing going empower organization way relationship cloud native application containerized infrastructure going pretty close think many organization going go build cloud native application portfolio without using container technology underlying packaging format use bullet point want drag much detail basically design principle example mean application component tend stateless possible notion scaling need capacity spin instance time back together orchestration engine assumption infrastructure may may reliable mean application able move around find infrastructure need built environment find way continue work particular site geography becomes unavailable application reconstitute area continue function collection service mentioned notion thing broken small component refer typically microservices typically build application component call microservice fairly stable highly stable apis application programming interface allow write application component take advantage service provides back presumption apis remain stable way apis produce result return data remain stable underlying code may change probably change fairly regular basis visible necessarily people consuming apis term updating life cycling start refresh component essentially rolling refresh start replace individual instance time case would wait till new instance spun allow new one spun using refreshed version code versus older version code age get removed system older code go away many case going fix patch/repair microservices put use basically replace new instance way important note one thing functionally different past wrote application erp application hr application sale force automation application function application going forward think notion service service used type number different type application example scientific function could used hpc application could used end calculation data coming iot data stream service useful use mentioned agility notion application component tend upgraded continuous basis way one thing see high alignment tool effect fact look development world today vast majority component application language forth developer use tend source going forward think going continue case software really becomes basis much content developer use going forward finally last bullet point notion paas layer functionality term going consume going see industry longer term move away infrastructure service model move platform service model quite probably container service model rationale developer necessarily need care server base level infrastructure software really want somewhere place application function made available basically create almost like car going supply road use road need road really talking talk paas layer basic infrastructure use necessarily create expected got known format got known way consumption application deployed spun used okay going switch start talking container diagram work little better build long short trying illustrate really notion application look like look like today left side chart notion classic virtualization classic virtualized deployment essentially bottom got basic infrastructure got desk cpu component make server generally server operating system hypervisor life case hypervisor may part operating system many case actually operating system application function individual component live top operating system fairly dependent operating system necessarily depended upon version operating system update applied forth becomes problem start application different requirement make scenario one application may different runtime need next application notion container really start become interesting looking right side chart notion take application take thing application depended upon glibc ph dll application need maybe closely related application essentially tie together logical fashion refer container happens beneath stack application plus application dependency notion container hosting engine essentially allows component logically reconstructed way intended remains operating system common application generally much primarily kernel operating system whereas kernel meaning runtime library service added thing actually get packaged container gary chen al gillenso notion big heavy operating system go away start notion thin operating system potentially hypervisor involved might hypervisor involved important thing think application going container dependency individual application tend live application container going pause second let gary jump see comment want add particular slide yeah mean think container basically really new technology existed many decade various form unix basically think really container really evolution o operating system originally designed keep thing separate right application one application two really isolated another like computer running chrome able see running outlook program operating system year working make better better better certainly newer technology linux thing like enable kind underlying foundation container around long time container basically better isolation thing already running operating system think kind different stuff existed pretty esoteric mean basically something system administrator would try like oh well application really sensitive going try build wall around container think docker really kick kind next generation container like know let take kind kernel technology like really kind many people know let find way apply developer sort magic really took turned packaging technology integrated develop workﬂow hated use shipping around package thing together think kind exploded kind new era container different yeah okay thanks gary another slide want talk little bit container virtualization move slide one second move next slide notice right chart showing hypervisor place got thinner o sitting literally server physically moving next slide taken diagram expanded split hypervisor back mix one thing think gary chensomewhat misunderstood maybe people jump conclusion fairly early container technology going effectively replace virtualization similarity benefit get containerization virtualization allow multiple application coexist physical server without conﬂicts thing accomplished different way whereas container scenario typically single container scenario bare metal deployment single shared thin operating system support individual container located system put hypervisor still multiple application frankly multiple containerized application multiple thin o sitting hypervisor particular chart indicates many sense many aspect combine two technology get benefit however say wo settling two different technology think happen longer term see container technology run bare metal scenario eﬃcient way support container customer willing run type environment probably going experience better performance better operational cost lower subscription fee hosting provider cloud necessarily get get isolation virtualization engine give decision customer make deal want want know got hybrid scenario coming along certainly including microsoft canonical particular trying build way essentially merging best hypervisor virtualization together best container technology think book yet fully written sort suﬃce say think going lot different option open customer want deployment anything want add gary yeah mean think lot driven kind cognitive apps designed apps large think virtualization brought kind model right problem operating system know kind running multiple application people started segmenting application large kind largely okay think microservices app decomposed ten maybe hundred thousand little piece putting one vm becomes kind impractical duplicating o probably lot larger application mandeep singh al gillenso think container really kind moving kind back kind started people using o consolidate running multiple service multiple apps o yeah really kind work different level depending want accomplish term app architecture term security may choose put container vm boundary different point boundary fairly different think vm boundary still considered much secure container boundary container boundary much secure containerized boundary think vm known outside people definitely trying eﬃcient way combine hypervisors container evolution much container involve bare metal lot may depend much container technology may develop eventually grow match isolation security virtual machine lot even depend thing like hardware intel find way help hardware silicon really gave big boost virtualization happened something similar may happen lot think thing could drive virtualized bare metal gary brieﬂy think touched lot word particular slide already notion container service platform service mean container service effectively platform service offering think industry going see people referring caas container service ongoing basis fine mean way think container service effectively platform service offering notion whether caas paas benefit largely worry underlying infrastructure somebody else manages make available obviously running deployment folk operation people going make sure deploy infrastructure concept running cloud much bring application everything else supplied wind focusing thing worry life cycle application monitor application keep application running eﬃciently necessarily worry infrastructure notion frankly one thing get benefit term cloud economics better get better density talked previous slide notion density versus isolation want go paas get higher density whether go containerized solution go pure paas solution level isolation different want true truthful isolation wind step away paas potentially looking virtualized frankly probably get virtualized platform service offering cloud vendor well let talk container software development specifically developer perspective notion going container conceptually new thought school back well last century notion writing reusable code something much front mind talked time practitioner left school striving right reusable code never easy many time specialization code meant really reusable multiple version thing today industry overall moving able truly embrace notion reusable code container one thing make possible simply got relatively small component code known api access point use service way cloud vendor much moving deliver service whether iot service big data service management service social data analytic service thing like much moved model going containerized developer model allows move much notion immutable infrastructure immutable deployment patch update simply replace image time thing wind getting stored common resource github docker hub github container image thing publicly available go get frankly notion using public software becoming agreeable lot organization able get thing make sure using thing known capability becomes really way speeding way bringing application market think developer tool today docker one popular engine see lot development tool integrating/update docker support directly finally container orchestration mentioned actually going dive towards end presentation think going hold diving much orchestration piece moment suﬃce say moment area market necessarily seen winner loser emerge think certain amount darwinian evolution take place orchestration end business gary chenso going turn gary let lead next couple slide seen kind talked difference container vms ultimately think short term really see container necessarily replacing vms certainly going change role vms feel think bigger transformation like happened virtualization brought kind new underlying kind computing paradigm rest stack changed even well right mean change silicon way kind server configured well management think container bringing kind change still going management function monitoring function going function different way worked old world going work new world certainly lot player existing business either going adapt see new people new technology kind arise another ph world container leadership think right unlike virtualization never really open common standard right everyone several different hypervisors different format source format necessarily open vms ultimately kind really portable instance right ca go vmr ph amazon aws different hypervisor fortunately kind new world really become standard first step called de facto standard moving something called open inaudible initiative kind give industry standard container format run time bring lot portability happening since base format essentially kind commoditized available anyone battle really fought moment kind clustering orchestration level really kind kubernetes docker format mesos think time go going move next higher level management paas thing like going evolve quickly moving higher stack order differentiate commercial market look container enterprise adoption today drawing huge interest doubt lot hype lot interest actually talking production usage data enterprise extremely small user early adopter really using lot text tab software development small development production experimental largely unmanaged buying clustering orchestration solution today kind around corner next step lot application kind net new cloud native application certainly lot happening enterprise always come lot baggage lot legacy stuff see lot lift shift think going market around certain people driving selling working kind solution people find new technology kind existing thing course public cloud kind huge part container well anything talk cloud lot container start public cloud settle think one thing container think virtualization new everyone kind following evolution think container cloud native application lot already proven work web scale pioneer like google facebook amazon others using type technology lot kind thing already solved right guy solved scale sort methodology tool use enterprise starting try replicate sort like forging unknown someone else already done like environment scale look kind observation seen mentioned web scale using year really kind already proven see today enterprise container managed really see le 10 using kind orchestration whether paid unpaid manage container think really going grow look kind four year really think least half container really going use commercially supported orchestration technology inaudible another percentage unsupported kind unsupported ultimately expect kubernetic solution going orchestrating container solution expand function time vendor overlay functionality fill white space development going skip think talk lot container versus vms think said container think important part container wo necessarily replace vms certainly going dramatic impact virtualization market replace hypervisor mean hypervisor become commoditized container take lot function vms already took lot people today use vms manage application essentially packaging technology shift container vm really becomes kind plumbing underneath really anything term application management certainly going affect people perceive value al gillen gary chen mandeep singhwhat hypervisor certainly splitting function happen key vendor discus al know wanted go open question put list key vendor space certainly lot talk ecosystem even storage think even kind key player space kind core container infrastructure virtualization public cloud well yeah think could probably spend hour slide alone suﬃce say since got three tier vendor got vendor involved basic technology allows package orchestrate application company company like coreos product technology like kubernetes docker know level market red hat course play space well red hat play much broader level supply orchestration packaging solution typically based docker kubernetes technology anyhow also supply virtualization infrastructure go around company like vmware course hypervisor solution also trying relevant container space container initiative got couple allows container run natively vmware existing virtualized infrastructure got container native solution third tier company like microsoft amazon google course going hosters container service provider moving quickly support container service think anything want add gary otherwise turn mandeep start fielding question yeah thanks yeah ph got question think taken enough time slide let hear people want talk great thank al gary terrific overview container reminder everyone send question q tab type question send u take start basically clear value proposition container need care wondering stage term al gillen mandeep singhof monetization look vmware vsphere quickly able monetize something horizon going take life talk monetization container technology multiple speaker gary yeah go ahead term monetization think going different happened vmware vmware able monetize core hypervisor strongly still continue today eventually started moving stack selling management tool ton money make hypervisor think docker really case people today buy container engine something think going generate anywhere near kind money something like vsphere esx reason really kind thing right people today get container engine o vendor essentially feature operating system operating system already product buy extra feature case get free becomes free feature operating system sort free pay operating system operating system paid money already incrementally going add lot case container engine o buy think part either getting operating system already possibly small incremental add getting hypervisor vendor getting public cloud service even buying software think think going related ph different say money made monetizing container think going monetizing much larger stack mature virtualization stack see sold today stack management infrastructure function think container headed kind immediately going period people container think core engine okay want piggyback comment made around public cloud vendor fact supporting container service trying embed container technology infrastructure amazon particular offer container also vendor service offer basically run smaller workload temporary workload difference competing technology al gillen mandeep singh al gillen mandeep singh mean obviously full story yet written technology evolving way think lambda intended essentially code demand application stand using lambda come along cause code go play used presumably packaged container potentially packaged container think container specifically notion want stand container available customer ongoing basis may necessarily want use lambda may want use standard container service think see lot think see lot mixing two approach know time maybe something using approach better way long term either case looking container application runtime environment delivered service yeah think lambda basically one type container architecture container deployment model good certain thing right going something think going universally applicable think way think one form one possible way could use container certainly something kind newer going something take entire world model think amazon player think variety service offer going offer platform service underlined container kind play around cluster load balancer thing like well lambda think coming kind fullest longest word different option people helpful hear notion server list computing essentially platform service worry server server infrastructure software worry application code terrific audience question cyber warfare challenge container technology make easier attacker use application normally housed vmware al gillen gary chen yeah really interesting question mean guess security challenge around container kind whole bunch different level mean one kind isolation right talked kind difference vm boundary container boundary think accepted virtualization close physical separation right two physical server diﬃcult one person break vm either compromise hypervisor compromise vm container easier right today see tenant separated container boundary always vm boundary look major public cloud google amazon agora stand container customer number one separate vm customer download never among o kernel o container one container two would never happen really comfortable model yet thing may change boundary could become stronger quite dangerous right think lot really aware people architect application put certain boundary certain place one potential thing evolving yes think container world yeah easier break another container easier compromise host could somewhat mitigated putting vm boundary around thing implication well think way container built often using kind docker way use repository start image public image available public repos people pulling code somewhere start application getting server getting framework think kind lot challenge make sure thing clean get injected application enterprise lot around code come made pulled change signed lot thing like want people insert kind bad thing try poison whole bunch people may pulling one thing add remember container notion relatively mutable meaning update ca essentially spin brand new instance gold master day hour protect integrity particular application feel risk compromised simply replace code fresh code known secure stop compromised later mandeep singh gary chen mandeep singh al gillen mandeep singh great another question cloud obviously new workload deployed cloud cloud infrastructure likely grow much faster container technology help guy know moving workload easily one public cloud vendor another cloud vendor make infrastructure agnostic deploying yeah think mean think core infrastructure level yeah certainly promise something never happened vms right think people found vms quite portable different environment yeah convert thing like think container yeah mean make much portable mean certain portability thing ca solve right mean ca move linux application window anything like assume still linux similar linux kernel yeah think lot people talk least infrastructure point view see compatibility layer input ph well use container least level move thing cynically still lot challenge think one level yes container make fundamental unit compute ph portable application dependency cloud service cloud api resides location location b going problem besides kind infrastructure portability movement know something inaudible guess yeah consume cloud service part infrastructure may preference one cloud another based better lower latency microsoft cloud amazon cloud specific thing external container build couple thing come mind even microsoft supporting red hat technology supporting container guess go show want guess company option move workload well window red hat yeah guess seeing portability big criterion come deploying workload mandeep singh al gillen gary chenquestions answer okay moving think time couple question question audience would encourage use q tab send u question one question obviously docker taken lead term developing technology using model collaborative using combined power developer think future container think large vendor going take lead really wrap service around kind try monetize opinion technology docker offering largely going consumed packaged service amazon microsoft already done red hat forth respect mean benefit presumably associated using docker branded product type deployment many case going generic service going incorporated base infrastructure maybe feel differently gary yeah mean think think look docker company docker community project docker company docker actually make large stack software thing everyone us docker engine format pretty universal docker suite orchestration management tool compete kubernetes mesos variety others yeah think look open source think ca really put open source one big bucket mean different level open source source code open one thing open development process community something else think going see different type open source open others maybe open core proprietary ad tightly controlled term control development yeah think basically people take core docker engine may take higher part docker stack call docker data center add thing modify compete completely separate stack docker yeah going quite varied market lot different piece docker kind driver core foundation mandeep singh al gillen gary chen al gillen gary chenplumbing part also completing lot people community okay one audience question asking container appears good portability reuse cost container especially term latency cost container oh yeah going say typically container able started quickly term small number millisecond start virtualized infrastructure using vm take 20 30 second even longer depending loaded respect think container technology way constructed way used deliver lower latency startup term actual functional latency running arguably thinner le complex infrastructure stack containerized application physical server underneath know much difference virtualization may put couple percent overhead mix know make much difference grand scheme thing know gary thought yeah mean guess sort tricky question talk latency mean talking cost energy really talking performance cost really depend whether container hypervisor look bare metal container cost container really kind startup right going start slightly slower uncontainerized process still pretty small mean talking order millisecond depending really requirement time could lot little actually running really latency thing think consider container running essentially get bare metal performance house bare metal virtualization different compare virtualized application yeah going lot latency container improve latency versus virtual something vm people mandeep singh al gillen mandeep singh al gillen gary chenvirtualize thing application performance overhead much interested container reduces way still bring similar benefit yeah guess mean lot kind angle think part think comparing virtualization container much eﬃcient kind inaudible bare metal add little bit startup excuse okay end question connection container technology trend mobility suited app based environment know context question regard mobility mobility allocation yeah mean think idea going functionality wrapped apps delivered mobile device connection think kind architecture going facilitate adoption container kind agnostic think mobile device least mobile end application think much talk containerizing part code stuff support mobile apps yeah going containerized yeah mean think mobile perfect candidate right mean lot kind looking kind cloud native use case online digital think lot way mobile apps interact smoother container small kind micro interaction rather large monolithic app client may pc yeah think container great think talk mobility mean lot brings scalability right lot kind mobile world fast grow mean mobile apps take using event lot kind deal click storm app get super populace talk scalability agility lot mobile apps generally move faster mean apps get updated time really kind follow kind cicd kind methodology container great support app rapidly changing new version coming often daily basis something like mandeep singh great time thank much al gary really enjoyed discussion yeah let u know question happy take thank joining u