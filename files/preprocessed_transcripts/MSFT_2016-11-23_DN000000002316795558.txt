good morning , welcome bi analyst briefing idc container - possible growth area infrastructure software . name mandeep sing , i'm software analyst bloomberg intelligence . today al gillen , group vp , idc ; gary chen , research manager idc . couple housekeeping note , today 's presentation recorded available playback . feel free ask question submitting one right slide . address question conclusion presentation . bi ? bloomberg intelligence provides in-depth analysis datasets industry , company government , esg , credit , economic litigation factor impact business decision . bloomberg intelligence research backed 300 plus third-party data provider delivered buy sell recommendation . analyst team average 20 plus year buy-side sell- side experience . bi exclusively provided client subscribe bloomberg professional service accessed bi go . 'll hand al gary kick presentation . al ? thanks , mandeep . , get u right slide . want -- sorry , 'm looking -- slide n't exist , okay . 're today , want talk container 'm joined gary chen . al gillen speaking right . give little bit background ; gary involved infrastructure-oriented research long time idc . gary lead virtualization software defined compute container much roll space . 've worked collaboratively gary area number year . recently , took developer research 'm looking container technology developer angle . 're going , 'm going kick presentation basically four area want talk . want start explaining idc see -- really driver , changing industry , refer digital transformation dx , 'll talk little bit , impact customer . mandeep singh al gillenwe 'll talk cloud native application specifically 're important change norm application development we've past , 'll dive container specifically give little bit background essentially change bring new construction technique new management lifecycle paradigm mix customer going deploying part digital transformation . 'll talk orchestration , container alone half story , really need orchestration engine conjunction container get full benefit , 'll talk . , course , we're expecting healthy robust q & discussion point . moving forward next slide , focusing digital transformation . apologize , 'm getting -- mandeep , 'm getting collection error message screen . 'm presumably -- right slide front , go ahead . okay . thank , yeah . anyway , slide titled digital transformation dx , think idc 's perspective , see industry moving ? like categorize three broad period time . first platform mainframe , connectivity typically direct-to-cache access device fixed function terminal . second platform distributed computing really 're coming second platform today . distributed computing second platform era , used unix server , linux server , window server , x86 , risk- based system typically . use local area network wide area network connection medium primarily pc point access . , course , transition third platform , 're moving scenario much backend infrastructure move time cloud , front-end device whole collection thing simply pc may one device use , course use phone , 've got thing going accessing data well . intelligent thing intelligent thing . happens , start move forward third platform era , digital transformation really take advantage . number thing happen move conversion . one , start look scenario infrastructure becomes standardized . rationale reasoning standardized infrastructure simply get benefit eﬃciency , common set baseline infrastructure server service 're consuming . reality , start think movement cloud-based infrastructure , get standardized infrastructure 're cloud-based environment , call microsoft amazon say , hey , want special server cloud . mean get make base infrastructure since customer get basic infrastructure . today , many customer consuming infrastructure service iaa typically may opportunity specialization base infrastructure layer . frankly think 's necessarily best interest long term , simply move iaa platform service model , get platform service model , customer say infrastructure look like . , benefit standardized infrastructure datacenter today wind something look act lot like cloud environment using time . second piece , 've got modernize application . application longer monolithic nature second platform era . today , customer starting build application much modular fashion really tie back container , use container , use cloud native type development technique . 'll drill little bit depth couple minute . start get model 've got modern application , largely componentized essentially small -- broking smaller piece individually go life cycle . happens , 've got move different model actually deploying managing application , 's notion using devops methodology devops process manage life cycle application . thing really important . mentioned , mean benefit -- type devops process together modern cloud native type application portfolio . allows iterate rapidly , allows deploy , on-prem off-prem frankly move two also allows great deal ﬂexibility agility , one thing customer looking today . okay , moving , think hit lot point already , summary list digital transformation , digital transformation benefit activity customer going . 's standardization infrastructure one piece , see customer starting make sure system interconnected . 's automation , thing managed autonomically automatically thing tend go life cycle much automated fashion . thing , 've got data . big part digital transformation includes consuming data wide variety source . certainly social medium social data 's pulled utilized application . 've got thing like weather data census data , necessarily changing quickly consist fairly large datasets . , course , skipped first one , internet thing , 's going tremendous amount data coming internet thing go forward . 's important able consume set data leverage application , 's part happens customer go digital transformation , data get organized stored . 've got make real-time decision based data ca n't act data real-time manner competitor , 're going find significant disadvantage -- competitive situation . bottom line , final thing think software intellectual property application functionality really becomes differentiator becomes something delivered lot value , believe lot value software going monetized subscription license sale 've historically , rather lot software intellectual property becomes part set resource device thing accessible thing able -- make smart decision function using software . software get monetized , thing become valuable . , important tied together . okay . one slide , 'm going get gary start jumping next couple slide . cloud native application , talked little bit think 's important recognize cloud native application one cornerstone going make digital transformation possible , one thing going empower organization . , way , relationship cloud native application containerized infrastructure going pretty close . n't think many organization going go build cloud native application portfolio without using container technology underlying packaging format use . bullet point n't want drag much detail , basically design principle -- , example , mean application component tend stateless possible notion scaling . need capacity , spin instance , time back together orchestration engine . assumption infrastructure may may reliable , mean application able move around find infrastructure need 're built environment find way continue work . particular site geography becomes unavailable , application reconstitute area continue function collection service . mentioned notion thing broken small component , refer typically microservices . typically , build application component , call microservice front-end fairly stable -- highly stable apis application programming interface allow write application component take advantage service provides back . presumption apis remain stable way apis produce result return data remain stable . underlying code may change probably change fairly regular basis , 's visible necessarily people consuming apis . term updating life cycling , start refresh component essentially rolling refresh , start replace individual instance time . case , would wait till new instance spun allow new one spun using refreshed version code versus older version code , age get removed system older code go away . many case , 're going fix patch/repair microservices 're put use , 'll basically replace new instance . , way , important note one thing 's functionally different , past , wrote application erp application hr application sale force automation application , function application . going forward , think notion service , service used type -- number different type application . , example , scientific function could used hpc application could used front- end calculation data coming iot data stream . , service useful use . mentioned agility notion application -- component tend upgraded continuous basis . , way , one thing see high alignment open-source tool effect . fact , look development world today , vast majority component application language forth developer use tend open- source . going forward think 's going continue case . open-source software really becomes basis much content developer use going forward . finally last bullet point , notion paas layer . functionality term 're going consume , going see industry , longer term , move away infrastructure service model move platform service model quite probably container service model . rationale developer n't necessarily need care server base level infrastructure software . really want somewhere place application function made available basically -- create almost like , car 're going supply road use road , n't need road . 's really 're talking talk paas layer basic infrastructure use n't necessarily create , 's expected -- 's got known format , 's got known way consumption , application deployed spun used . okay . , 'm going switch start talking container . diagram , work little better build , long short , 're trying illustrate really notion application look like look like today . left side chart , notion classic virtualization classic virtualized deployment , essentially bottom 've got basic infrastructure , 've got desk cpu , component make server . generally server operating system , 's hypervisor life . case , hypervisor may part operating system , many case actually operating system . application function individual component live top operating system , 're fairly dependent operating system n't necessarily -- 're depended upon version operating system update applied forth . becomes problem , start application , different requirement make scenario one application may different runtime need next application . 's notion container really start become interesting . looking right side chart , notion -- , take application take thing application depended upon . , glibc [ ph ] dll 's application need maybe closely related application . , essentially tie together logical fashion refer container . happens , beneath stack application plus application ' dependency , notion container hosting engine essentially allows -- component logically reconstructed way intended . remains operating system common application . generally 's much primarily kernel , operating system , whereas add-on kernel , meaning runtime library service added , thing actually get packaged container . gary chen al gillenso notion big heavy operating system go away , start notion thin operating system potentially hypervisor involved might hypervisor involved . important thing think , application going container dependency individual application tend live application container . , 'm going pause second let gary jump see comment want add particular slide . yeah . mean , think , container basically really new technology . existed many decade various form , unix . basically think really container really evolution o , operating system , originally designed , keep thing separate , right application one application two , really isolated another 's like computer -- 're running chrome , able see 're running , outlook program . operating system year working make better better better . certainly newer technology linux thing like enable . 's kind underlying foundation container , 's around long time . container basically better isolation thing already running operating system . think 's kind different , stuff existed pretty esoteric , mean basically something system administrator would try . 's like , oh , well , application really sensitive , 'm going try build wall around container . think docker -- really kick kind next generation container like -- know , let 's take kind kernel technology 's like really kind many people know , let 's find way apply developer sort magic . really took turned packaging technology , integrated develop workﬂow hated use shipping around , package thing together . think 's kind exploded kind new era container different . , yeah . okay . thanks , gary . another slide , want talk little bit container virtualization . move slide , one second move next slide . notice right chart , 're showing hypervisor place , 've got thinner o 's sitting literally server physically . moving next slide , 've taken diagram 've expanded 've split hypervisor back mix , one thing think gary chensomewhat misunderstood maybe people jump conclusion fairly early container technology going effectively replace virtualization . similarity benefit get containerization virtualization allow multiple application coexist physical server without conﬂicts . thing accomplished different way , whereas container scenario typically single -- container scenario bare metal deployment single shared thin operating system , support individual container located system . put hypervisor , still multiple application , frankly , multiple containerized application multiple thin o 's sitting hypervisor particular chart indicates . many sense , many aspect , combine two technology get benefit . however , 's say long-term wo n't settling two different technology . think happen , longer term , see container technology run bare metal scenario eﬃcient cost-effective way support container . customer willing run type multi-tenant environment , 're probably going experience better performance better operational cost lower subscription fee hosting provider 're cloud . n't necessarily get , n't get isolation virtualization engine give 's decision customer make deal want n't want . know , 've got hybrid scenario coming along , certainly -- including microsoft , canonical particular trying build way essentially merging best hypervisor virtualization together best container technology . think book yet fully written sort . suﬃce say think going lot different option open customer want deployment . , anything want add , gary ? yeah . mean , think lot driven kind cognitive apps designed . apps large , think virtualization brought kind one-app one-os model , right . problem operating system , know , kind running multiple application , people started segmenting . application large , kind largely -- , okay , think microservices , app decomposed ten maybe hundred , thousand little piece , putting one vm becomes kind impractical , duplicating o , probably lot larger application . mandeep singh al gillenso , think , container really kind moving kind back kind started , people using o consolidate , running multiple service , multiple apps o . yeah , 's -- really kind work different level , depending want accomplish term app architecture , term security , may choose put container vm boundary different point . boundary fairly different . think vm boundary still considered much secure container boundary , container boundary much secure un- containerized boundary . think vm known -- outside , people definitely trying eﬃcient way combine hypervisors container , evolution much container involve bare metal , lot may depend much container technology may develop . eventually grow match isolation security virtual machine lot even depend thing like hardware . intel find way help hardware silicon , really gave big boost virtualization happened , something similar may happen . lot , think , thing could drive line-wise virtualized bare metal . gary ? brieﬂy , think touched lot word particular slide already , notion container service platform service . mean , container service effectively platform service offering . 'll -- think industry 're going see people referring caas container service ongoing basis , 's fine . mean , way think , container service effectively platform service offering . notion whether caas paas , benefit largely n't worry underlying infrastructure , somebody else manages make available . obviously , 're running in-house deployment folk , operation people going make sure deploy infrastructure , concept running cloud much bring application everything else supplied . wind focusing thing , worry life cycle application , monitor application , keep application running eﬃciently , necessarily worry infrastructure . notion multi-tenancy , 's -- frankly 's one thing get benefit term cloud economics better get better density . talked previous slide , notion density versus isolation , 's trade-off . want go paas , get higher density whether go containerized solution go pure paas solution , level isolation different . want true -- truthful isolation , wind step away paas potentially looking virtualized , frankly , probably get virtualized platform service offering cloud vendor well . -- -- let talk container software development , specifically . developer perspective , notion going container -- conceptually , 's new thought . school , back well last century , notion writing reusable code something much front mind talked time . practitioner left school striving right reusable code , never easy many time specialization code , meant n't really reusable multiple version thing . today , industry overall moving able truly embrace notion reusable code . , container one thing make possible , simply 've got relatively small component code known api access point use service . , way , cloud vendor much moving deliver service , whether iot service , big data service , management service , social data analytic service , thing like much moved model . going containerized developer model allows move much notion immutable -- infrastructure immutable deployment n't patch update , simply replace image time . thing wind getting stored common resource , github -- docker hub github , , container image thing publicly available , 's go get , frankly notion using public software becoming agreeable lot organization . able get thing make sure 're using thing known capability , becomes really way speeding way bringing application market . think developer tool today , docker one popular engine . see lot development tool integrating/update docker support directly . finally container orchestration . mentioned , actually going dive towards end presentation . think 'm going hold diving much orchestration piece moment . suﬃce say , moment , area market n't necessarily seen winner loser emerge . think 's certain amount darwinian evolution take place orchestration end business . gary chenso , 'm going turn gary . let lead next couple slide . 've seen kind talked difference container vms . ultimately think , short term , n't really see container necessarily replacing vms . certainly , 're going change role vms , feel -- think bigger transformation -- like happened virtualization , brought kind new underlying , kind , computing paradigm , rest stack changed even well , right . mean change silicon way , kind , server configured , well management . think container bringing kind change . still going management function monitoring function , 're going function different way . worked old world n't going work new world . certainly lot player existing business either going adapt see new people new technology kind arise another [ ph ] world . container leadership , think , right 's -- unlike virtualization , never really open common standard , right . everyone , several different hypervisors , different format , source format necessarily open . , vms ultimately , kind , n't really portable instance , right , can't go vmr [ ph ] amazon aws , different hypervisor . fortunately , kind new world open-source really become standard . , first step called de facto standard 's moving something called open ( inaudible ) initiative , kind -- give industry standard container format run time . bring lot portability , 's happening , since base format essentially kind commoditized available anyone , battle really fought moment , kind clustering orchestration level , 's really kind kubernetes , docker 's format mesos . think time go , 's going move next higher level management , paas thing like . 's going evolve quickly , moving -- higher stack order differentiate commercial market . , look container enterprise adoption today , 's drawing huge interest . doubt 's lot hype lot interest , 're actually talking production usage data enterprise , extremely small . -- user , early adopter , 're really using lot text tab software development , small development -- production . , 's experimental , 's largely unmanaged . 're buying clustering orchestration solution today , 's kind around corner next step . lot application kind net new cloud native application , certainly lot happening , enterprise always come lot baggage lot legacy stuff . see lot lift shift . think going market around . certain people driving selling -- working kind solution people find new technology kind existing thing . course , public cloud kind huge part container well . anything talk cloud , lot container start public cloud n't settle on-prem . think one thing , container , think virtualization new everyone kind following evolution . think container cloud native application , lot -- 's already proven work web scale pioneer like google facebook amazon , others using type technology . , lot kind thing already solved , right , guy solved scale , sort methodology tool use . enterprise starting try replicate . 's sort like forging unknown . someone else already done , 's like , environment scale . look kind -- observation , 've seen , mentioned , web scale using year that's really 's kind already proven . see today enterprise container managed really see le 10 % using kind orchestration , whether 's paid unpaid manage container . think 's really going grow , look kind four year , really think , least , half container really going use commercially supported orchestration technology ( inaudible ) another percentage unsupported kind open-source unsupported . ultimately expect kubernetic solution going orchestrating container solution expand function time vendor overlay functionality fill white space development . 'm going skip . think talk lot container versus vms . think , said container -- think important part , container wo n't necessarily replace vms 're certainly going dramatic impact virtualization market . n't replace hypervisor , n't mean hypervisor n't become commoditized container take lot function vms already took . lot people today use vms manage application essentially packaging technology . shift container , vm really becomes kind plumbing underneath , n't really anything -- term application management . 's certainly going affect people perceive value al gillen gary chen mandeep singhwhat hypervisor , -- certainly splitting function happen . key vendor discus . al , n't know wanted go open question . put list key vendor space , certainly lot talk ecosystem , even storage , think even , kind key player space kind core container infrastructure virtualization , public cloud well . yeah . think could probably spend hour slide alone , suﬃce say since 've got three tier vendor , 've got vendor involved basic technology allows package orchestrate application company . company like coreos , product technology like kubernetes docker , know level market . red hat , course , play space well , red hat play much broader level supply orchestration packaging solution , typically based docker kubernetes technology anyhow . also supply virtualization infrastructure go around . company like vmware , course , hypervisor solution , also trying relevant container space container initiative . they've got couple one-net allows container run natively vmware's existing virtualized infrastructure 've got container native solution . third tier company like microsoft amazon google , course , going hosters container service provider moving quickly support container service . , think -- anything want add gary , otherwise turn mandeep start fielding question . yeah . thanks . yeah . 've [ ph ] got question . think 've taken enough time slide , let 's hear people want talk . great . thank , al gary , terrific overview container . reminder everyone , send question , q & tab , type question send u take real-time . 'll start . basically 'm clear value proposition container need care . 'm wondering stage term al gillen mandeep singhof monetization ? look vmware vsphere quickly able monetize , something horizon 's going take life talk monetization container technology . ( multiple speaker ) , gary . yeah . go ahead . term monetization , think , 's going different happened vmware . vmware able monetize core hypervisor strongly still continue today . eventually started moving stack selling management tool . ton money make hypervisor think docker , 's really case . -- people today n't buy container engine 's something , think , 's going generate anywhere near kind money something like vsphere esx . reason , 's really kind stand-alone thing , right . people today get container engine o vendor , essentially feature operating system . operating system already product buy , 's extra feature . case get free becomes free feature operating system . 's sort free , pay operating system , operating system paid . money already , incrementally 's going add lot . case , stand-alone container engine o 's buy , think part either getting operating system , already possibly small incremental add getting hypervisor vendor 're getting public cloud service 're even buying software . think think 's going related [ ph ] different . say n't money made monetizing container . think get-go , 's going monetizing much larger stack , mature virtualization stack see sold today stack management infrastructure function think container headed kind immediately . going period people -- container , think , core engine . okay . want piggyback comment made around public cloud vendor , fact supporting container service trying embed container technology infrastructure . amazon , particular , offer container , also vendor service offer basically run smaller workload , temporary workload , 's difference ? competing technology ? al gillen mandeep singh al gillen mandeep singh , mean , obviously full story yet written , technology evolving , way think , lambda intended essentially code demand . application , stand using lambda come along cause code go play used . presumably packaged container potentially packaged container . think container specifically , notion , want stand container available customer ongoing basis , may necessarily want use lambda , may want use standard container service . think , 'll see lot -- think , 'll see lot mixing two approach know time maybe something using lambda-like approach better way long term . either case , 're looking container application runtime environment , delivered service . yeah . think lambda basically one type container architecture container deployment model , 's good certain thing , right . 's going something , think , 's going universally applicable . -- think way think , 's one form one possible way could use container 's certainly something kind newer , 's going something take entire world , 'd model . think amazon player , think , variety service offer . 're going offer platform service underlined container , -- kind , infrastructure-oriented play around cluster load balancer thing like , well lambda . think 're coming , kind , fullest , longest word different option people . 's helpful . -- 'll hear notion server list computing essentially platform service n't worry server server infrastructure software , worry application code . terrific . audience question . cyber warfare challenge container technology ? make easier attacker use application normally housed vmware ? al gillen gary chen yeah . 's really interesting question . mean , guess security challenge around container kind whole bunch different level . mean , one , kind isolation , right . talked kind difference vm boundary container boundary . think 's accepted virtualization , close physical separation , right , two physical server . , diﬃcult one person break vm , either compromise hypervisor compromise vm . container , 's easier , right . today see tenant separated container boundary , always vm boundary . look major public cloud , google , amazon agora , stand container customer number one , separate vm customer download . never co-host among o kernel 're o 'm container one 're container two , would never happen . really comfortable model yet , thing may change , boundary could become stronger , 's quite dangerous right think lot really aware people architect application . put certain boundary certain place . one potential thing evolving . yes , think container world , yeah , 's easier break another container . easier compromise host , could somewhat mitigated putting vm boundary around thing . implication well . think , way container built often using -- 's kind docker way use repository start image . public image available , public repos people pulling code somewhere start application , getting server , getting framework , think kind -- lot challenge make sure thing clean get injected application enterprise . lot around code come ? made ? pulled ? change ? signed ? lot thing like , want people insert kind bad thing try poison whole bunch people may pulling . one thing 'll add . remember container notion relatively mutable , meaning n't update , ca n't essentially spin brand new instance gold master day hour protect integrity particular application . feel , risk compromised , simply replace code fresh code known secure . n't stop compromised later . mandeep singh gary chen mandeep singh al gillen mandeep singh great . another question cloud . , obviously new workload deployed cloud cloud infrastructure likely grow much faster on-premise . container technology help guy know , moving workload easily one public cloud vendor another cloud vendor . make infrastructure agnostic -- 're deploying ? yeah , think mean -- think core infrastructure level yeah , 's certainly promise . 's something never happened vms right ? think people found vms n't quite portable -- 're different environment , yeah , convert thing like , think container -- yeah mean , n't make much portable . mean , certain portability thing ca n't solve , right ? mean , ca n't move linux application window anything like , assume 's still linux , similar linux kernel . yeah , think lot people talk , least infrastructure point view , see compatibility layer , input [ ph ] , well use container , least , level , move thing cynically , still lot challenge , n't think one level , yes , container make fundamental unit compute [ ph ] portable , application dependency cloud service cloud api resides location 's location b , 're going problem besides kind infrastructure portability movement . -- n't know something , ( inaudible ) . guess -- yeah , consume cloud service part infrastructure , may preference one cloud another based better lower latency microsoft 's cloud amazon 's cloud , 's specific thing external container build . couple thing come mind even microsoft , 's supporting red hat technology , supporting container guess go show want , guess company option move workload well window red hat yeah , 's guess seeing portability big criterion come deploying workload . - mandeep singh - al gillen - gary chenquestions answer okay , moving think time couple question , question audience , would encourage use q & tab send u question . one question obviously docker taken lead term developing technology using open-source model -- 's collaborative , 's using combined power developer . think future container think -- large vendor going take lead really wrap service around kind try monetize ? 'm opinion technology docker offering largely going consumed packaged service amazon microsoft already done red hat forth . respect , mean , benefit presumably associated using docker branded product type deployment . many case , 's going generic service , 's going incorporated base infrastructure maybe feel differently , gary ? yeah , , mean , think -- think look docker , company , 's -- docker , community project docker , company . docker actually make large stack software . thing everyone us docker engine format . 's pretty universal , docker suite orchestration management tool compete head- to-head kubernetes mesos variety others . yeah , think look open source think ca n't really put open source one big bucket . mean , different level open source source code open one thing , open development process community something else . think 're going see different type open source , open others , maybe open core proprietary ad -- tightly controlled term control development . yeah , think basically people take core docker engine . may take higher part docker stack , call docker data center add thing modify compete completely separate stack docker . yeah , 's going quite varied market lot different piece docker kind driver core , foundation - mandeep singh - al gillen - gary chen - al gillen - gary chenplumbing part , 're also completing lot people community . okay . one audience question . 're asking container appears good portability reuse . 's cost container , especially term latency cost ? container -- -- oh , yeah , going say , typically container able started , quickly term small number millisecond . start virtualized infrastructure -- using vm , take 20 , 30 second even longer depending loaded . respect , think container technology , way 's constructed way 's used , deliver lower latency startup . term actual functional latency 's running , arguably thinner le complex infrastructure stack containerized application physical server underneath . n't know much difference -- virtualization may put couple percent overhead mix , n't know make much difference grand scheme thing . n't know , gary thought . yeah , mean , guess 's sort tricky question . talk latency , mean -- 're talking cost energy , really talking performance cost . really depend whether container -- hypervisor . look bare metal container , cost container really kind startup , -- right ? -- 's going start slightly slower uncontainerized process . 's still pretty small , mean , 're talking order millisecond . depending really start-up requirement time , could lot little . actually running , 's really latency . thing -- think consider container running , 's essentially get bare metal performance house bare metal . virtualization different , compare virtualized application , yeah , 's going lot latency . container improve latency versus virtual -- something vm . people - mandeep singh - al gillen - mandeep singh - al gillen - gary chenvirtualize thing high-performance application , performance overhead much interested container reduces way still bring -- similar benefit . yeah , guess , mean 's lot kind angle , think part , think 're comparing virtualization , container much eﬃcient , 're kind ( inaudible ) bare metal add little bit startup , excuse . okay 'll end question . connection container technology trend mobility ? suited app based environment ? , know context question regard mobility ? mobility allocation ? yeah , mean think idea , going functionality wrapped apps , delivered mobile device . connection think kind architecture going facilitate adoption container 's kind agnostic ? n't think mobile device , least mobile end application , n't think much talk containerizing part code . stuff back-end , support mobile apps , yeah , 's going containerized . yeah , mean , think mobile back-ends perfect candidate , right ? mean lot kind looking , kind cloud native use case online digital . think lot way mobile apps interact back-end smoother container , 's small kind micro interaction rather large monolithic app client may pc . yeah , think container great -- think talk mobility , mean , lot brings scalability , right ? lot -- kind mobile world , 's fast grow mean , mobile apps take 're using event . lot -- kind -- deal click storm app get super populace , talk scalability agility lot . mobile apps generally move faster . mean , apps get updated time , really kind follow kind cicd kind methodology . container back-end great support app that's rapidly changing new version coming often daily basis something like . - mandeep singh great . 's time . thank much , al gary . really enjoyed discussion . yeah , let u know follow-up question , happy take . thank joining u .